// Copyright 2017 The Closure Rules Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package closure;

option java_package = "io.bazel.rules.closure.webfiles";

// Manifest generated by a web build rule target.
//
// This file is stored to disk as a binary protobuf with the .pb extension. It
// will always be accompanied by a .i.zip with the same name. The incremental
// zip file contains all the sources of a rule and any other compiler output,
// while excluding transitive data. Together these files serve as an archive
// format that serves the same purpose as jar, but more efficiently.
//
// This manifest maps web paths defined or produced by a single build rule to
// byte offsets in the zip, as well as runfiles paths if they exist. Manifests
// also contain information about the relationships between its own web paths,
// and those of direct dependencies.
message WebfileManifestInfo {

  // Canonical build target for this rule,
  // e.g. @com_google_javascript_closure_library//closure/goog
  string label = 1;

  // Map of files outputted by this build rule target in deterministic reverse
  // topological order w.r.t. links. Within this message, the webfile.webpath
  // key is unique with caveats described below; however, it may be genuinely
  // duplicated across multiple WebfilesInfo messages, in which case the last
  // entry wins.
  repeated WebfileInfo webfile = 2;

  // Relationships between absolute web paths in deterministic reverse
  // topological order. Files become linked when they import each other. This
  // field is also aggressively populated by runtime_deps. For each link.key, a
  // webfile.webpath should exist.
  repeated MultimapInfo link = 3;

  // Relationships between absolute web paths that have been eliminated, in no
  // particular deterministic order. This happens when the compiler does things
  // like inline files. For each unlink.key, a webfile.webpath should exist.
  // This field will not contradict link.
  repeated MultimapInfo unlink = 4;
}

// Web file index entry.
//
// Within a single manifest, the WebfileInfo message can be used to map a web
// path to zero or more files on disk, as well as zero or more entries in the
// blob.
message WebfileInfo {

  // Absolute path of file on web server. This field must be unique within a
  // particular WebfileManifestInfo message, because zip files are not allowed
  // to contain duplicate filenames.
  string webpath = 1;

  // Blaze execroot path. This field is only present when it's passed using a
  // WebRuleInfo message. After the WebCompiler run, this field is cleared,
  // since Blaze paths are usually only valid for a single ctx.action
  // invocation and the canonical source of data becomes either the runpath or
  // the incremental zip.
  string path = 2;

  // Runfiles path of original source file relative to TEST_SRCDIR. This is
  // used by WebfilesServer to read the file with live source reloading that
  // goes faster than iblaze can regenerate the proto. This field will be
  // absent for files generated by the compiler and linker.
  string runpath = 3;

  // Indicates the canonical source of data for this file is in the associated
  // incremental zip archive. If this field is false, then offset, length, and
  // token should be absent. This field is not set when passed via WebRuleInfo,
  // but always becomes set once run through WebCompiler, et al.
  bool in_zip = 4;

  // Byte offset of data in associated .i.zip file. This field must be present
  // if in_zip is true. This field allows us to seek to a specific byte offset
  // in the zip file to obtain an individual file, without having to scan
  // through the whole archive.
  uint64 offset = 5;

  // Opaque binary token which can be used for caching this web file. This
  // token is guaranteed to be large enough to qualify for global uniqueness
  // and therefore can be used as a key in and of itself. If this token is
  // empty, no caching should be performed.
  bytes digest = 6;
}

// Input parameters for the WebCompiler, WebLinker, and WebDeployer programs.
//
// This is stored to disk by Skylark code. It is always serialized as text with
// the .pbtxt extension. This proto is only good for a single ctx.action run.
// It is only stored to disk because Blaze currently leaves us no other option.
message WebRuleInfo {

  // Canonical build target for this rule,
  // e.g. @com_google_javascript_closure_library//closure/goog
  string label = 1;

  // Path of output.pb file to which WebfileManifestInfo is written. This field
  // also implies a concomitant output.blob file. This field must be present.
  string output = 2;

  // List of srcs declared by target, in no particular order. This field may be
  // empty. If entries are specified, the src.path field must be set.
  repeated WebfileInfo src = 3;

  // Blaze execroot paths of all transitive binary proto WebfilesInfo
  // manifests in reverse topological order. This includes all transitive deps,
  // runtime_deps, as well as the exports of direct dependencies, which
  // includes the exports those exports exported. This field may be empty.
  repeated string dep = 4;

  // List of which dep paths are direct deps, including their exports, in no
  // particular order. This must be a subset of dep and must not overlap with
  // runtime_dep.
  repeated string direct_dep = 5;

  // List of which dep paths are runtime deps, including their exports, in no
  // particular order. This must be a subset of dep and must not overlap with
  // direct_dep.
  repeated string runtime_dep = 6;

  // Suppress codes used to turn errors into warnings.
  repeated string suppress = 7;
}

// Protobuf representation of Multimap<String, String>.
message MultimapInfo {

  // Key, which is considered unique across the MultimapInfo.
  string key = 1;

  // Value, which might be required to be unique for a given key. This must not
  // be empty.
  repeated string value = 2;
}

///////////////////////////////////////////////////////////////////////////////
// THE FOLLOWING MESSAGES ARE OF LEGACY CONCERN AND MARKED FOR DELETION
///////////////////////////////////////////////////////////////////////////////

// Information produced by each webfiles() target.
message Webfiles {

  // Canonical build target for this rule,
  // e.g. @com_google_javascript_closure_library//closure/goog
  string label = 1;

  // List of srcs associated with webfiles() target.
  repeated WebfilesSource src = 2;
}

// Information about a single entry in the src list.
message WebfilesSource {

  // Blaze execroot path. This can be used by ctx.action to read the file from
  // disk. But please note that this file is probably only valid for the
  // specific target that generated it.
  string path = 1;

  // Long path of file relative to TEST_SRCDIR. This is used by WebfilesServer
  // to read the file.
  string longpath = 2;

  // Absolute path of file on web server.
  string webpath = 3;
}
